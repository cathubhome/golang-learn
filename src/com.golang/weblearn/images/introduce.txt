流程图中http包执行流程说明
1、创建Listen Socket, 监听指定的端口, 等待客户端请求到来。
2、Listen Socket接受客户端的请求, 得到Client Socket, 接下来通过Client Socket与客户端通信。
3、处理客户端的请求, 首先从Client Socket读取HTTP请求的协议头,
 如果是POST方法, 还可能要读取客户端提交的数据, 然后交给相应的handler处理请求,
 handler处理完毕准备好客户端需要的数据, 通过Client Socket写给客户端

在整个过程中我们需要清楚的知道如下三个问题，也就知道go是如何让web运行的
如何监听端口?
如何接受客户端请求?
如何分配handler?

Go是通过一个函数ListenAndServe来处理这些事情的，
这个底层其实这样处理的：初始化一个server对象，
然后调用了net.Listen("tcp", addr)，
也就是底层用TCP协议搭建了一个服务，然后监控我们设置的端口。

Go的http包的源码，通过下面的代码我们可以看到整个的http处理过程：

func (srv *Server) Serve(l net.Listener) error {
	defer l.Close()
	var tempDelay time.Duration // how long to sleep on accept failure
	for {
		rw, e := l.Accept()
		if e != nil {
			if ne, ok := e.(net.Error); ok && ne.Temporary() {
				if tempDelay == 0 {
					tempDelay = 5 * time.Millisecond
				} else {
					tempDelay *= 2
				}
				if max := 1 * time.Second; tempDelay > max {
					tempDelay = max
				}
				log.Printf("http: Accept error: %v; retrying in %v", e, tempDelay)
				time.Sleep(tempDelay)
				continue
			}
			return e
		}
		tempDelay = 0
		c, err := srv.newConn(rw)
		if err != nil {
			continue
		}
		go c.serve()
	}
}
监控之后如何接收客户端的请求呢？
上面代码执行监控端口之后，调用了srv.Serve(net.Listener)函数，
这个函数就是处理接收客户端的请求信息。
这个函数里面起了一个for{}，首先通过Listener接收请求，
其次创建一个Conn，最后单独开了一个goroutine，
把这个请求的数据当做参数扔给这个conn去服务：go c.serve()。
这个就是高并发体现了，用户的每一次请求都是在一个新的goroutine去服务，相互不影响。

那么如何具体分配到相应的函数来处理请求呢？
conn首先会解析request:c.readRequest(),然后获取相应的handler:handler := c.server.Handler，
也就是我们刚才在调用函数ListenAndServe时候的第二个参数，
我们前面例子传递的是nil，也就是为空，那么默认获取handler = DefaultServeMux,
那么这个变量用来做什么的呢？
这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数，
那么这个我们有设置过吗?
有，我们调用的代码里面第一句不是调用了http.HandleFunc("/", index)吗
这个作用就是注册了请求/的路由规则，当请求uri为"/"，路由就会转到函数index，
DefaultServeMux会调用ServeHTTP方法，
这个方法内部其实就是调用sayhelloName本身，最后通过写入response的信息反馈到客户端。